Documentation
nltk.chat.util module
class nltk.chat.util.Chat[source]
Bases: object

__init__(pairs, reflections={})[source]
Initialize the chatbot. Pairs is a list of patterns and responses. Each pattern is a regular expression matching the user’s statement or question, e.g. r’I like (.*)’. For each such pattern a list of possible responses is given, e.g. [‘Why do you like %1’, ‘Did you ever dislike %1’]. Material which is matched by parenthesized sections of the patterns (e.g. .*) is mapped to the numbered positions in the responses, e.g. %1.

Parameters
pairs (list of tuple) – The patterns and responses

reflections (dict) – A mapping between first and second person expressions

Return type
None

converse(quit='quit')[source]
respond(str)[source]
Generate a response to the user input.

Parameters
str (str) – The string to be mapped

Return type
str


Source code for nltk.chat.util
# Natural Language Toolkit: Chatbot Utilities
#
# Copyright (C) 2001-2023 NLTK Project
# Authors: Steven Bird <stevenbird1@gmail.com>
# URL: <https://www.nltk.org/>
# For license information, see LICENSE.TXT

# Based on an Eliza implementation by Joe Strout <joe@strout.net>,
# Jeff Epler <jepler@inetnebr.com> and Jez Higgins <jez@jezuk.co.uk>.

import random
import re

reflections = {
    "i am": "you are",
    "i was": "you were",
    "i": "you",
    "i'm": "you are",
    "i'd": "you would",
    "i've": "you have",
    "i'll": "you will",
    "my": "your",
    "you are": "I am",
    "you were": "I was",
    "you've": "I have",
    "you'll": "I will",
    "your": "my",
    "yours": "mine",
    "you": "me",
    "me": "you",
}


[docs]class Chat:
[docs]    def __init__(self, pairs, reflections={}):
        """
        Initialize the chatbot.  Pairs is a list of patterns and responses.  Each
        pattern is a regular expression matching the user's statement or question,
        e.g. r'I like (.*)'.  For each such pattern a list of possible responses
        is given, e.g. ['Why do you like %1', 'Did you ever dislike %1'].  Material
        which is matched by parenthesized sections of the patterns (e.g. .*) is mapped to
        the numbered positions in the responses, e.g. %1.

        :type pairs: list of tuple
        :param pairs: The patterns and responses
        :type reflections: dict
        :param reflections: A mapping between first and second person expressions
        :rtype: None
        """

        self._pairs = [(re.compile(x, re.IGNORECASE), y) for (x, y) in pairs]
        self._reflections = reflections
        self._regex = self._compile_reflections()


    def _compile_reflections(self):
        sorted_refl = sorted(self._reflections, key=len, reverse=True)
        return re.compile(
            r"\b({})\b".format("|".join(map(re.escape, sorted_refl))), re.IGNORECASE
        )

    def _substitute(self, str):
        """
        Substitute words in the string, according to the specified reflections,
        e.g. "I'm" -> "you are"

        :type str: str
        :param str: The string to be mapped
        :rtype: str
        """

        return self._regex.sub(
            lambda mo: self._reflections[mo.string[mo.start() : mo.end()]], str.lower()
        )

    def _wildcards(self, response, match):
        pos = response.find("%")
        while pos >= 0:
            num = int(response[pos + 1 : pos + 2])
            response = (
                response[:pos]
                + self._substitute(match.group(num))
                + response[pos + 2 :]
            )
            pos = response.find("%")
        return response

[docs]    def respond(self, str):
        """
        Generate a response to the user input.

        :type str: str
        :param str: The string to be mapped
        :rtype: str
        """

        # check each pattern
        for (pattern, response) in self._pairs:
            match = pattern.match(str)

            # did the pattern match?
            if match:
                resp = random.choice(response)  # pick a random response
                resp = self._wildcards(resp, match)  # process wildcards

                # fix munged punctuation at the end
                if resp[-2:] == "?.":
                    resp = resp[:-2] + "."
                if resp[-2:] == "??":
                    resp = resp[:-2] + "?"
                return resp


    # Hold a conversation with a chatbot
[docs]    def converse(self, quit="quit"):
        user_input = ""
        while user_input != quit:
            user_input = quit
            try:
                user_input = input(">")
            except EOFError:
                print(user_input)
            if user_input:
                while user_input[-1] in "!.":
                    user_input = user_input[:-1]
                print(self.respond(user_input))



exemples:
from nltk.chat.util import Chat,reflections
from responses import intents as respuestas;
#reflection son correcciones de género cuando el usuario habla y el bot responde
my_reflections= {
    "yo": "tú",
    "mi": "tu",
    "yo estoy": "tu estás",
    
}

def chatear():
    #mensaje inicial
    print("Hola, soy el chatbot de atención al cliente de internet. ¿En qué puedo ayudarle?") #mensaje por defecto
    
    chat = Chat(respuestas,my_reflections)
    chat.converse()
    
if __name__ == "__main__":
    chatear()

chatear()

exempels:
#Respuestas del bot
intents = [
    [
        r"se me ha caido el internet|No tengo internet|No me va el internet|No tengo línea|No tengo red| se ha caido internet",
        ["Sentimos ese fallo, puede probar a reiniciar su router. En caso de que siga teniendo problemas dígame su nombre y apellidos por favor",]
    ],
    [
        r"mi nombre es (.*)| me llamo (.*)",
        ["Perfecto %1 un operario se pondrá en contacto con usted lo antes posible",]
    ],
    [
        r"cuando se paga la factura|cuando tengo que pagar la factura| cuando me pasan los recibos |cuando tengo que pagar |cuando pago",
        ["Le pasan la factura el primero de cada mes",]
    ],
    [
        r"promociones|información de promociones|ofertas|quiero saber ofertas|descuentos|quiero ver descuentos|ver descuentos|ver ofertas|ver promociones",
        ["Si tiene un teléfono móvil contratado con nosotros, puede vincularlo a su factura de fibra y le hacemos un 15 por ciento durante el mes de agosto",]
    ],
    [
        r"hola|hey|buenas|buenas tardes|buenos dias|saludos",
        ["Hola", "¿en qué puedo ayudarte?",]
    ],
    [
        r"Necesito soporte|necesito ayuda|soporte|soporte tecnico|ayuda tecnica",
        ["Puede contactarnos en el telefono 647563746, estaremos encantados de ayudarle",]
        
    ],
    [
        r"queja|quiero poner una queja|estoy descontento|reclamacion|quiero poner una reclamacion",
        ["Sentimos que no esté contento con nuestros servicios, mande un correo a soporte@soport.com y allí le guiarán en todo el proceso",]
    ],
    [
        r"finalizar|adios|gracias|hasta otra|hasta luego",
        ["Adios","recuerda que puedes ver más información de nuestros servicios en www.serviciointernet.net"]
],
]